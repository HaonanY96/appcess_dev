@startuml
class App {
	+ Integer AppId
	+ String AppName
	+ String AppPath
	+ Byte[] IconData
	+ Type Type
	+ float CpuUsage
	+ Integer MemoryUsage
	+ Integer ThreadCount
	+ Integer DiskUsage
	+ Integer RunCount
}

public enum Type
{
    App,
    File
}

class File {
	+ Integer FileId
	+ String FileName
	+ String FilePath
	+ Byte[] Thumbnail
	+ Integer FileOpenCount
	+ App AssociatedApp
}

class RecentApp
{
	+ Integer RecentAppId
	+ App AppInfo
	+ DateTime LastUsedTime
}

class RecentFile
{
	+ Integer RecentFileId
	+ File FileInfo
	+ DateTime LastOpenedTime
}

class AppBroker

class AppIconExtractor {
	byte[] ExtractIcon(String appPath)
}

class FileThumbnailExtractor {
	byte[] ExtractThumbnail(String filePath)
}

class AppSet {
	+ Integer AppSetId
	+ String AppSetName
	+ String KeyCombination
	+ Integer AppCount
	+ Integer FileCount
	+ Integer LaunchCount
	+ List<AppSetApp> AppSetApps
}

class AppSetBroker

class AppSetApp {
	+ Integer AppSetId
	+ Integer AppId
	+ Integer LaunchOrder
	+ App App
}

class SystemResources {
	+ Float CpuAvailable
	+ Integer MemoryAvailable
	+ Integer DiskAvailable
	+ Integer ThreadAvailable
}

class abstract BaseSettings {
	abstract void LoadSettings()
	abstract void SaveSettings()
}
class GeneralSettings
class InterfaceSettings
class HotkeySettings
class ImportExportSettings
class UpdateSettings
class Settings

class SettingsBroker

IShortcutHandler <|-- ShortcutHandler

class ShortcutHandler {
	void CreateBatchFile(string batPath, List<string> appPaths)
	
}

note right of ShortcutHandler : This class can generate, open and delete .bat files and shortcuts

class ShortcutBroker

class Hotkey {
	+ Integer HotkeyId
	+ String KeyCombination
	+ Integer AppSetId
	+ AppSet AppSet
	void RegisterHotkey()
}

class HotkeyBroker {
	+ void SaveHotkey
	+ void LoadHotkey
}



IDBConnect <|-- DBConnect

class DBConnect {
	+ String ConnectionString
}

interface IDataManager {

}

class DataManager {
	+ void ImportData()
	+ void ExportData()
}
@enduml