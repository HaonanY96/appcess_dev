@startuml
class App {
	+ Integer AppId
	+ String AppName
	+ String AppPath
	+ Byte[] IconData
	+ EntityType Type
	+ float CpuUsage
	+ Integer MemoryUsage
	+ Integer ThreadCount
	+ Integer DiskUsage
	+ Integer RunCount
}

public enum Type
{
    App,
    File
}

class File {
	+ Integer FileId
	+ String FileName
	+ String FilePath
	+ Byte[] Thumbnail
	+ Integer FileOpenCount
	+ App AssociatedApp
}

class RecentApp
{
	+ Integer RecentAppId
	+ App AppInfo
	+ DateTime LastUsedTime
}

class RecentFile
{
	+ Integer RecentFileId
	+ File FileInfo
	+ DateTime LastOpenedTime
}

class AppBroker

class IconExtractor {
	byte[] ExtractIcon(String appPath, bool isApp)
	byte[] ExtractThumbnail(String filePath)
}

class AppSet {
	+ Integer AppSetId
	+ String AppSetName
	+ String KeyCombination
	+ Integer AppCount
	+ Integer FileCount
	+ Integer LaunchCount
	+ List<AppSetApp> AppSetApps
	void RegisterHotkey()
}

class AppSetBroker

class AppSetApp {
	+ Integer AppSetId
	+ Integer AppId
	+ Integer LaunchOrder
	+ App App
}

class SystemResources {
	+ Float CpuAvailable
	+ Integer MemoryAvailable
	+ Integer DiskAvailable
	+ Integer ThreadAvailable
}

abstract class BaseSettings {
	abstract void LoadSettings()
	abstract void SaveSettings()
}

public class GeneralSettings : BaseSettings
{
    public bool StartAutomatically { get; set; }
    public string Language { get; set; }

    public override void LoadSettings()
    {
        // 假设从某个数据源加载设置，例如配置文件或数据库
        // 示例代码：
        StartAutomatically = true; // 仅作示例，实际应该从数据源加载
        Language = "English"; // 仅作示例，实际应该从数据源加载
    }

    public override void SaveSettings()
    {
        // 假设将设置保存到某个数据源，例如配置文件或数据库
        // 示例代码：
        // Save StartAutomatically and Language to data source
    }
}

class InterfaceSettings
class HotkeySettings
class ImportExportSettings
class UpdateSettings

class Settings {
    public GeneralSettings General { get; set; }
    public InterfaceSettings Interface { get; set; }
    public HotkeySettings Hotkeys { get; set; }
    public ImportExportSettings ImportExport { get; set; }
    public UpdateSettings Update { get; set; }
}

class SettingsBroker

IShortcutHandler <|-- ShortcutHandler

class ShortcutHandler {
	void CreateBatchFile(string batPath, List<string> appPaths)
	
}

note: This class can generate, open and delete .bat files and shortcuts

class BaseBroker
class AppBroker : BaseBroker {
    // Specific operations for App
}

class AppSetBroker : BaseBroker {
    // Specific operations for AppSet
}

class SettingsBroker : BaseBroker {
    // Specific operations for Settings
}

class ShortcutBroker : BaseBroker {
    // Specific operations for Shortcuts
}

class HotkeyBroker : BaseBroker {
    public void SaveHotkey() { /* Implementation */ }
    public void LoadHotkey() { /* Implementation */ }
}

interface IDBConnect {
    string ConnectionString { get; set; }
    void OpenConnection();
    void CloseConnection();
}

class DBConnect : IDBConnect {
    public string ConnectionString { get; set; }
    
    public void OpenConnection() {
        // Implementation
    }

    public void CloseConnection() {
        // Implementation
    }
}


IDBConnect <|-- DBConnect

class DBConnect {
	+ String ConnectionString
}

interface IDataManager {
	ImportData
	ExportData
	定义连接字符串和数据库连接相关方法。
}

class DataManager : IDataManager {
	+ void ImportData()
	+ void ExportData()
}

============================
class ShortcutBroker



@enduml